"use strict";
/**
 * Author: zhaoleimxd
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotifyIconDataW = void 0;
/**
* This class is for automatic binary editing of NotifyIconDataW struct from <shellapi.h>.
* need more information about this struct please view the page below:
* https://learn.microsoft.com/en-us/windows/win32/api/shellapi/ns-shellapi-notifyicondataw
*/
class NotifyIconDataW {
    constructor() {
        this.is64BitProcess = false;
        this.handleLength = 4;
        if (process.arch == 'ia32') {
            this.buffer = Buffer.alloc(956, 0);
            this.cbSize = 956;
        }
        else if (process.arch == 'x64') {
            this.buffer = Buffer.alloc(976, 0);
            this.cbSize = 976;
            this.is64BitProcess = true;
            this.handleLength = 8;
        }
        else {
            throw new Error(`Arch not support: ${process.arch}`);
        }
    }
    getBuffer() {
        return this.buffer;
    }
    get cbSize() {
        return this.buffer.readUInt32LE(0);
    }
    set cbSize(value) {
        this.buffer.writeUInt32LE(value, 0);
    }
    get hWnd() {
        let offset = this.is64BitProcess == true ? 8 : 4;
        return this.buffer.slice(offset, offset + this.handleLength);
    }
    set hWnd(value) {
        let offset = this.is64BitProcess == true ? 8 : 4;
        value.copy(this.buffer, offset, 0, this.handleLength);
    }
    get uID() {
        let offset = this.is64BitProcess == true ? 16 : 8;
        return this.buffer.readUInt32LE(offset);
    }
    set uID(value) {
        let offset = this.is64BitProcess == true ? 16 : 8;
        this.buffer.writeUInt32LE(value, offset);
    }
    get uFlags() {
        let offset = this.is64BitProcess == true ? 20 : 12;
        return this.buffer.readUInt32LE(offset);
    }
    set uFlags(value) {
        let offset = this.is64BitProcess == true ? 20 : 12;
        this.buffer.writeUInt32LE(value, offset);
    }
    get uCallbackMessage() {
        let offset = this.is64BitProcess == true ? 24 : 16;
        return this.buffer.readUInt32LE(offset);
    }
    set uCallbackMessage(value) {
        let offset = this.is64BitProcess == true ? 24 : 16;
        this.buffer.writeUInt32LE(value, offset);
    }
    get hIcon() {
        let offset = this.is64BitProcess == true ? 32 : 20;
        return this.buffer.slice(offset, offset + this.handleLength);
    }
    set hIcon(value) {
        let offset = this.is64BitProcess == true ? 32 : 20;
        value.copy(this.buffer, offset, 0, this.handleLength);
    }
    get szTip() {
        let offset = this.is64BitProcess == true ? 40 : 24;
        return this.buffer.toString('utf16le', offset, offset + 256);
    }
    set szTip(value) {
        let offset = this.is64BitProcess == true ? 40 : 24;
        Buffer.from(value, `utf16le`).copy(this.buffer, offset, 0, 256 - 2);
    }
    get dwState() {
        let offset = this.is64BitProcess == true ? 296 : 280;
        return this.buffer.readUInt32LE(offset);
    }
    set dwState(value) {
        let offset = this.is64BitProcess == true ? 296 : 280;
        this.buffer.writeUInt32LE(value, offset);
    }
    get dwStateMask() {
        let offset = this.is64BitProcess == true ? 300 : 284;
        return this.buffer.readUInt32LE(offset);
    }
    set dwStateMask(value) {
        let offset = this.is64BitProcess == true ? 300 : 284;
        this.buffer.writeUInt32LE(value, offset);
    }
    get szInfo() {
        let offset = this.is64BitProcess == true ? 304 : 288;
        return this.buffer.toString('utf16le', offset, offset + 512);
    }
    set szInfo(value) {
        let offset = this.is64BitProcess == true ? 304 : 288;
        Buffer.from(value, `utf16le`).copy(this.buffer, offset, 0, 512 - 2);
    }
    get uTimeout() {
        let offset = this.is64BitProcess == true ? 816 : 800;
        return this.buffer.readUInt32LE(offset);
    }
    set uTimeout(value) {
        let offset = this.is64BitProcess == true ? 816 : 800;
        this.buffer.writeUInt32LE(value, offset);
    }
    get uVersion() {
        let offset = this.is64BitProcess == true ? 816 : 800;
        return this.buffer.readUInt32LE(offset);
    }
    set uVersion(value) {
        let offset = this.is64BitProcess == true ? 816 : 800;
        this.buffer.writeUInt32LE(value, offset);
    }
    get szInfoTitle() {
        let offset = this.is64BitProcess == true ? 820 : 804;
        return this.buffer.toString('utf16le', offset, offset + 128);
    }
    set szInfoTitle(value) {
        let offset = this.is64BitProcess == true ? 820 : 804;
        Buffer.from(value, `utf16le`).copy(this.buffer, offset, 0, 128 - 2);
    }
    get dwInfoFlags() {
        let offset = this.is64BitProcess == true ? 948 : 932;
        return this.buffer.readUInt32LE(offset);
    }
    set dwInfoFlags(value) {
        let offset = this.is64BitProcess == true ? 948 : 932;
        this.buffer.writeUInt32LE(value, offset);
    }
    get guidItem() {
        let start = this.is64BitProcess == true ? 952 : 936;
        return this.buffer.slice(start, start + 16);
    }
    set guidItem(value) {
        let start = this.is64BitProcess == true ? 952 : 936;
        value.copy(this.buffer, start, 0, 16);
    }
    get hBalloonIcon() {
        let offset = this.is64BitProcess == true ? 968 : 952;
        return this.buffer.slice(offset, offset + this.handleLength);
    }
    set hBalloonIcon(value) {
        let offset = this.is64BitProcess == true ? 968 : 952;
        value.copy(this.buffer, offset, 0, this.handleLength);
    }
}
exports.NotifyIconDataW = NotifyIconDataW;
//# sourceMappingURL=data:application/json;base64,